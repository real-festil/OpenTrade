{"version":3,"sources":["components/ui/input/input.module.css","components/ui/backdrop/backdrop.module.css","images/man.svg","images/lock.svg","components/changePassword/changePassword.module.css","components/placeOrder/Forms/Manual/manual.module.css","images/cross.svg","components/editors/algoEditor/algoEditor.module.css","components/layout/layout.js","components/ui/button/button.js","components/ui/backdrop/backdrop.js","components/changePassword/changePassword.js","components/ui/select/select.js","components/placeOrder/Forms/Manual/manual.js","components/placeOrder/Forms/AplhaExample/alphaExample.js","components/placeOrder/Forms/TWAP/twap.js","components/placeOrder/Forms/TwapPy/twapPy.js","components/placeOrder/Forms/MACrossing/macrossing.js","components/placeOrder/placeOrder.js","components/editors/algoEditor/algoEditor.js","containers/dashboard/dashboard.js","components/ui/loginInput/input.js","containers/login/login.js","containers/risk/risk.js","App.js","serviceWorker.js","index.js","components/placeOrder/placeOrder.module.css","containers/login/login.module.css","components/ui/button/button.module.css","components/ui/loginInput/input.module.css"],"names":["module","exports","Layout","this","props","children","Component","button","btnSelector","className","classes","ButtonDisabled","type","onClick","clicked","disabled","caption","Button","onSubmit","submit","backdrop","show","Backdrop","changePassword","state","styles","border","errorMessage","layout","i","x","y","w","h","minW","maxW","Infinity","minH","maxH","onChangePassword","setState","console","log","style","transform","opacity","width","verticalCompact","isResizable","key","Draggable","DraggablePart","src","crossImage","alt","modalClosed","Error","InputPart","Input","placeholder","ButtonPart","select","options","customStyles","container","containerWidth","marginRight","control","provided","isFocused","isSelected","isHovered","height","invalid","borderRadius","transition","backgroundColor","color","fontSize","cursor","padding","display","boxShadow","singleValue","marginBottom","indicatorSeparator","menu","zIndex","marginLeft","position","background","option","name","classNamePrefix","defaultValue","value","inputValue","onChange","changed","numberMask","createNumberMask","prefix","suffix","priceMask","allowDecimal","decimalLimit","required","undefined","selectComponentWrapper","input","meta","rest","Select","error","touched","security","label","timeInForce","manual","render","handleSubmit","form","submitting","pristine","values","SelectPart","Row","component","validate","WrapTitle","Title","mask","inputClasses","alphaExample","internalCross","agression","twap","twapPy","macrossing","PlaceOrder","onSelectedChange","data","optionRender","placeOrder","draggableHandle","Header","HeaderGroup","AlgoEditor","dataPython","loading","dataOther","onToggle","Wrapper","ContentWrapper","split","initialSize","Tree","Editor","mode","theme","onLoad","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Dashboard","showPlaceOrder","showChangePassword","showAlgo","placeOrderHandler","changePasswordHandler","algoHandler","modalClosedHandler","InputBox","img","Login","username","password","valid","errormessage","userInputHandler","event","target","buttonClicked","passwordInputHandler","setTimeout","errorHandler","pass","data-theme","dataTheme","YellowText","manImage","lockImage","Risk","App","isLogged","onLoginPass","Promise","resolve","then","result","localStorage","setItem","onLogout","JSON","parse","getItem","login","redirect","path","to","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24df554c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__2Cny7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"backdrop_Backdrop__8vPtZ\"};","module.exports = __webpack_public_path__ + \"static/media/man.e792d17d.svg\";","module.exports = __webpack_public_path__ + \"static/media/lock.62f94555.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChangePassword\":\"changePassword_ChangePassword__19Q2o\",\"Draggable\":\"changePassword_Draggable__3waay\",\"DraggablePart\":\"changePassword_DraggablePart__2JANn\",\"InputPart\":\"changePassword_InputPart__lOPye\",\"Error\":\"changePassword_Error__Iyngo\",\"Input\":\"changePassword_Input__2ozP0\",\"ButtonPart\":\"changePassword_ButtonPart__JtbEE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SelectPart\":\"manual_SelectPart__3g6iI\",\"Error\":\"manual_Error___qenC\",\"Input\":\"manual_Input__28mE3\",\"ButtonPart\":\"manual_ButtonPart__3cen8\",\"HeaderGroup\":\"manual_HeaderGroup__2rcPy\",\"Row\":\"manual_Row__l7-7w\",\"WrapTitle\":\"manual_WrapTitle__2ZST2\"};","module.exports = __webpack_public_path__ + \"static/media/cross.975c33cd.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"algoEditor_Wrapper__jCBYY\",\"Draggable\":\"algoEditor_Draggable__1BJh1\",\"ContentWrapper\":\"algoEditor_ContentWrapper__2aPvn\",\"Tree\":\"algoEditor_Tree__1KJdw\",\"Result\":\"algoEditor_Result__30r2r\"};","import React, { Component } from 'react';\r\nimport LoginClasses from '../../containers/login/login.module.css';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <ThemeSwitcher\r\n                    cssSelector={arr}\r\n                    darkColor=\"#282c34\"\r\n                    lightColor=\"#ffffff\"\r\n                    lightTextColor=\"#272b33\"\r\n                    darkTextColor=\"#ffffff\"/> */}\r\n                <p>Layout</p>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from './button.module.css';\r\n\r\nconst button = ( props ) => {\r\n        let btnSelector = props.btnSelector;\r\n        if(btnSelector === 'btnDisabled') {\r\n             btnSelector = (<button className={classes.ButtonDisabled}\r\n                                    type={props.type}\r\n                                    onClick={props.clicked}\r\n                                    disabled={props.disabled}>\r\n                                {props.caption}\r\n                            </button>)\r\n        } else btnSelector =  (<button className={classes.Button}\r\n                                       onClick={props.clicked}\r\n                                       disabled={props.disabled}\r\n                                       onSubmit={props.submit}>\r\n                                    {props.caption}\r\n                              </button>)\r\n            return (\r\n                <>\r\n                    {btnSelector}\r\n                </>\r\n        );\r\n    }\r\n\r\nexport default button;","import React from 'react';\r\nimport classes from './backdrop.module.css';\r\n\r\nconst backdrop = ( props ) => props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null;\r\n\r\nexport default backdrop;","import React, { Component } from 'react';\r\nimport classes from './changePassword.module.css';\r\nimport GridLayout from 'react-grid-layout';\r\nimport Button from '../ui/button/button';\r\nimport Backdrop from '../ui/backdrop/backdrop';\r\nimport './changePassword.css';\r\nimport crossImage from '../../images/cross.svg';\r\n\r\nclass changePassword extends Component {\r\n    state = {\r\n        styles : {border: ''},\r\n        errorMessage : ''\r\n    }\r\n\r\n    layout = [\r\n        {i: 'a', x: 5, y: 0, w: 3, h: 2.2, minW: 2.8, maxW: Infinity, minH: 2.1, maxH: Infinity}\r\n    ];\r\n\r\n    onChangePassword = () => {\r\n        this.setState({styles:{border: '1px solid red'}, errorMessage: 'Server unreachable'});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <Backdrop show={this.props.show}/>\r\n            <GridLayout\r\n                className={classes.changePassword}\r\n                layout={this.layout}\r\n                style={{\r\n                    transform: this.props.show ? 'translateY(0)' : 'translateY(-150vh)',\r\n                    opacity: this.props.show ? '1' : '0'\r\n                }}\r\n                width={1200}\r\n                verticalCompact={false}\r\n                isResizable={true}>\r\n                <div key=\"a\" className={classes.Draggable}>\r\n                    <div className={classes.DraggablePart}>\r\n                        <p>Change Password</p>\r\n                        <img src={crossImage} alt='' onClick={this.props.modalClosed}/>\r\n                    </div>\r\n                    <p className={classes.Error}>{this.state.errorMessage}</p>\r\n                    <div className={classes.InputPart}>\r\n\r\n                        <input className={classes.Input} style={this.state.styles} placeholder=\"Change password\"></input>\r\n                        <input className={classes.Input} style={this.state.styles} placeholder=\"New password\"></input>\r\n                        <input className={classes.Input} style={this.state.styles} placeholder=\"New password confirmation\"></input>\r\n                    </div>\r\n\r\n                    <div className={classes.ButtonPart}>\r\n\r\n                        <Button caption=\"Submit\" clicked={this.onChangePassword}/>\r\n                        <Button caption=\"Cancel\" btnSelector=\"btnDisabled\" clicked={this.props.modalClosed}/>\r\n                    </div>\r\n                </div>\r\n            </GridLayout>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default changePassword;","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport './Select.css';\r\n\r\nconst select = ( props ) => {\r\n    let options = props.options;\r\n\r\n    const customStyles = {\r\n        container: () => ({\r\n            width: props.containerWidth,\r\n            marginRight: 20\r\n        }),\r\n        control: (provided, {isFocused, isSelected, isHovered}) => ({\r\n            width: props.width,\r\n            height: \"20px\",\r\n            border: isFocused ? \"2px solid #20a8d8\" : props.invalid ? \"2px solid red\" : \"2px solid #37373c\" ,\r\n            borderRadius: \"5px\",\r\n            transition: \"0.2s ease\",\r\n            backgroundColor: \"#202028\",\r\n            color: \"#22ADF6\",\r\n            fontSize: \"12px\",\r\n            cursor: \"pointer\",\r\n            padding: \"5px\",\r\n            display: 'flex',\r\n            boxShadow: isFocused ? \"0px 0px 15px #20a8d8\" : null\r\n        }),\r\n        singleValue: () => ({\r\n            color: \"#22ADF6\",\r\n            marginBottom: 5\r\n        }),\r\n        indicatorSeparator: () => ({\r\n            border: 'none'\r\n        }),\r\n        menu: () => ({\r\n            width: props.containerWidth,\r\n            zIndex: '200',\r\n            marginLeft: 3,\r\n            position: 'absolute',\r\n            color: \"white\",\r\n            background: \"rgb(34,173,246)\",\r\n            background: \"linear-gradient(90deg, rgba(34,173,246,1) 0%, rgba(93,193,246,1) 100%)\"\r\n        }),\r\n        option: () => ({\r\n            color: \"white\",\r\n            height: '20px',\r\n            background: \"rgb(34,173,246)\",\r\n            background: \"linear-gradient(90deg, rgba(34,173,246,1) 0%, rgba(93,193,246,1) 100%)\",\r\n            textAlign: 'left',\r\n            fontSize: 12,\r\n            padding: 5,\r\n            paddingLeft: 14,\r\n            fontWeigt: 'regular '\r\n        }),\r\n        placeholder: () => ({\r\n            color: \"#555555\",\r\n            marginBottom: 5\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Select options={options}\r\n                name={props.name}\r\n                styles={customStyles}\r\n                style={props.style}\r\n                className='react-select-container'\r\n                classNamePrefix=\"react-select\"\r\n                defaultValue={props.value}\r\n                placeholder={props.inputValue}\r\n                onChange={props.changed}\r\n                {...select}/>\r\n    )\r\n}\r\n\r\nexport default select;","import React from 'react';\r\nimport Button from '../../../ui/button/button';\r\nimport Input from '../../../ui/input/input';\r\nimport Select from '../../../ui/select/select';\r\nimport classes from './manual.module.css';\r\nimport inputClasses from '../../../ui/input/input.module.css';\r\nimport { Form, Field } from 'react-final-form';\r\nimport MaskedInput from 'react-text-mask';\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\r\n\r\nconst onSubmit = (value) => {\r\n    console.log(value)\r\n}\r\n\r\nconst numberMask = createNumberMask({\r\n    prefix: '',\r\n    suffix: ''\r\n})\r\n\r\nconst priceMask = createNumberMask({\r\n    prefix: '$',\r\n    suffix: '',\r\n    allowDecimal: true,\r\n    decimalLimit: 5\r\n})\r\n\r\nconsole.log(priceMask)\r\n\r\nconst required = value => (value ? undefined : 'Required')\r\n\r\nfunction selectComponentWrapper( props ) {\r\n    const {\r\n        input : { name, options, onChange, ...restInput},\r\n        meta,\r\n        ...rest\r\n    } = props;\r\n\r\n    return (<Select {...rest}\r\n                    className={classes.Select}\r\n                    options={props.options}\r\n                    name={props.name}\r\n                    changed={onChange}\r\n                    inputValue={props.inputValue}\r\n                    width={props.width}\r\n                    invalid={meta.error && meta.touched}\r\n                    containerWidth={props.containerWidth} />)\r\n}\r\n\r\nconst security = [\r\n    { value: 'Server unreachable', label: 'Server unreachable'}\r\n];\r\n\r\nconst type = [\r\n    { value: 'Limit', label: 'Limit'},\r\n    { value: 'Market', label: 'Market'},\r\n    { value: 'Shop', label: 'Shop'},\r\n    { value: 'Stop Limit', label: 'Stop Limit'},\r\n    { value: 'OTC', label: 'OTC'}\r\n];\r\n\r\nconst timeInForce = [\r\n    { value: 'Day', label: 'Day'},\r\n    { value: 'IOC', label: 'IOC'},\r\n    { value: 'OPG', label: 'OPG'},\r\n    { value: 'FOK', label: 'FOK'}\r\n]\r\n\r\nconst manual = ( props ) => (\r\n        <Form\r\n            onSubmit={onSubmit}\r\n            render={({ handleSubmit, form, submitting, pristine, values}) => (\r\n            <form onSubmit={handleSubmit}>\r\n                    <div className={classes.SelectPart} >\r\n                        <div className={classes.Row}>\r\n                        <Field name=\"security\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='security'\r\n                                    width='100%'\r\n                                    containerWidth=\"30%\"\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"account\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='account'\r\n                                    width='100%'\r\n                                    containerWidth='30%'\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"side\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='side'\r\n                                    width='100%'\r\n                                    containerWidth=\"20%\"\r\n                                    >\r\n                            </Field>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Type:</p>\r\n                                <Field name=\"type\"\r\n                                    component={selectComponentWrapper}\r\n                                    options={type}\r\n                                    width='340%'\r\n                                    containerWidth=\"25%\"\r\n                                    ></Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>TimeInForce:</p>\r\n                                <Field name=\"timeInForce\"\r\n                                    component={selectComponentWrapper}\r\n                                    options={timeInForce}\r\n                                    width='340%'\r\n                                    containerWidth=\"25%\"\r\n                                    ></Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Quantity:</p>\r\n                                <Field name=\"quantity\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                placeholder='Quantity'\r\n                                                name='quantity'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Price:</p>\r\n                                <Field name=\"Price\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={priceMask}\r\n                                                placeholder='Price'\r\n                                                name='price'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Stop price:</p>\r\n                                <Field name=\"stopPrice\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={priceMask}\r\n                                                placeholder='Stop Price'\r\n                                                name='stopPrice'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonPart}>\r\n                        <Button caption=\"Send\" type=\"submit\"/>\r\n                        <Button caption=\"Close\" btnSelector=\"btnDisabled\" clicked={props.modalClosed}/>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n)\r\n\r\nexport default manual;\r\n","import React from 'react';\r\nimport Button from '../../../ui/button/button';\r\nimport Input from '../../../ui/input/input';\r\nimport Select from '../../../ui/select/select';\r\nimport classes from '../Manual/manual.module.css';\r\nimport inputClasses from '../../../ui/input/input.module.css';\r\nimport { Form, Field } from 'react-final-form';\r\nimport MaskedInput from 'react-text-mask';\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\r\n\r\nconst onSubmit = (value) => {\r\n    console.log(value)\r\n}\r\n\r\nconst numberMask = createNumberMask({\r\n    prefix: '',\r\n    suffix: ''\r\n})\r\n\r\nconst required = value => (value ? undefined : 'Required')\r\n\r\nconst security = [\r\n    { value: 'Server unreachable', label: 'Server unreachable'}\r\n];\r\n\r\nfunction selectComponentWrapper( props ) {\r\n    const {\r\n        input : { name, options, onChange, ...restInput},\r\n        meta,\r\n        ...rest\r\n    } = props;\r\n\r\n    return (<Select {...rest}\r\n                    className={classes.Select}\r\n                    options={props.options}\r\n                    name={props.name}\r\n                    changed={onChange}\r\n                    inputValue={props.inputValue}\r\n                    width={props.width}\r\n                    invalid={meta.error && meta.touched}\r\n                    containerWidth={props.containerWidth} />)\r\n}\r\n\r\n\r\nconst alphaExample = ( props ) => (\r\n        <Form\r\n            onSubmit={onSubmit}\r\n            render={({ handleSubmit, form, submitting, pristine, values}) => (\r\n            <form onSubmit={handleSubmit}>\r\n                    <div className={classes.SelectPart} >\r\n                        <div className={classes.Row}>\r\n                            <Field name=\"security\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='security'\r\n                                    width='100%'\r\n                                    containerWidth=\"30%\"\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"account\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='account'\r\n                                    width='100%'\r\n                                    containerWidth='30%'\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"side\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='side'\r\n                                    width='100%'\r\n                                    containerWidth=\"20%\"\r\n                                    >\r\n                            </Field>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Quantity:</p>\r\n                                <Field name=\"quantity\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                placeholder='Quantity'\r\n                                                name='quantity'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonPart}>\r\n                        <p></p>\r\n                        <Button caption=\"Send\" type='submit'/>\r\n                        <Button caption=\"Close\" btnSelector=\"btnDisabled\" clicked={props.modalClosed}/>\r\n                    </div>\r\n            </form>\r\n        )}\r\n    />\r\n\r\n)\r\n\r\nexport default alphaExample;\r\n","import React from 'react';\r\nimport Button from '../../../ui/button/button';\r\nimport Input from '../../../ui/input/input';\r\nimport Select from '../../../ui/select/select';\r\nimport classes from '../Manual/manual.module.css';\r\nimport inputClasses from '../../../ui/input/input.module.css';\r\nimport { Form, Field } from 'react-final-form';\r\nimport MaskedInput from 'react-text-mask';\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\r\n\r\nconst security = [\r\n    { value: 'Server unreachable', label: 'Server unreachable'}\r\n];\r\n\r\nconst internalCross = [\r\n    { value: 'Yes', label: 'Yes'},\r\n    { value: 'No', label: 'No'}\r\n];\r\n\r\nconst agression = [\r\n    { value: 'Low', label: 'Low'},\r\n    { value: 'Medium', label: 'Medium'},\r\n    { value: 'High', label: 'High'},\r\n    { value: 'Highest', label: 'Highest'}\r\n]\r\n\r\nconst onSubmit = (value) => {\r\n    console.log(value)\r\n}\r\n\r\nconst numberMask = createNumberMask({\r\n    prefix: '',\r\n    suffix: ''\r\n})\r\n\r\nconst priceMask = createNumberMask({\r\n    prefix: '$',\r\n    suffix: '',\r\n    allowDecimal: true,\r\n    decimalLimit: 5\r\n})\r\n\r\nconst required = value => (value ? undefined : 'Required')\r\n\r\nfunction selectComponentWrapper( props ) {\r\n    const {\r\n        input : { name, options, onChange, ...restInput},\r\n        meta,\r\n        ...rest\r\n    } = props;\r\n\r\n    return (<Select {...rest}\r\n                    className={classes.Select}\r\n                    options={props.options}\r\n                    name={props.name}\r\n                    changed={onChange}\r\n                    inputValue={props.inputValue}\r\n                    width={props.width}\r\n                    invalid={meta.error && meta.touched}\r\n                    containerWidth={props.containerWidth} />)\r\n}\r\n\r\nconst twap = ( props ) => (\r\n        <Form\r\n            onSubmit={onSubmit}\r\n            render={({ handleSubmit, form, submitting, pristine, values}) => (\r\n            <form onSubmit={handleSubmit}>\r\n                    <div className={classes.SelectPart} >\r\n                        <div className={classes.Row}>\r\n                        <Field name=\"security\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='security 1'\r\n                                    width='100%'\r\n                                    containerWidth=\"30%\"\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"account\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='account'\r\n                                    width='100%'\r\n                                    containerWidth='30%'\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"side\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='side'\r\n                                    width='100%'\r\n                                    containerWidth=\"20%\"\r\n                                    >\r\n                            </Field>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Quantity:</p>\r\n                                <Field name=\"quantity\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                placeholder='Quantity'\r\n                                                name='quantity'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Price:</p>\r\n                                <Field name=\"Price\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={priceMask}\r\n                                                placeholder='Price'\r\n                                                name='price'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>ValidSeconds:</p>\r\n                                <Field name=\"validSeconds\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                name='validSeconds'\r\n                                                placeholder='300'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>MinSize:</p>\r\n                                <Field name=\"minSize\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                name='minSize'\r\n                                                placeholder='0'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>MaxFloor:</p>\r\n                                <Field name=\"maxFloor\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                name='maxFloor'\r\n                                                placeholder='0'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>MaxPov:</p>\r\n                                <Field name=\"MaxPov\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                name='MaxPov'\r\n                                                placeholder='0'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                        <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Agression:</p>\r\n                                <Field name=\"agression\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={agression}\r\n                                    inputValue='side'\r\n                                    width='340%'\r\n                                    containerWidth=\"25%\"\r\n                                    >\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>InternalCross:</p>\r\n                                <Field name=\"internalCross\"\r\n                                        component={selectComponentWrapper}\r\n                                        options={internalCross}\r\n                                        inputValue='side'\r\n                                        width='340%'\r\n                                        containerWidth=\"25%\"\r\n                                        >\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonPart}>\r\n                        <Button caption=\"Send\" type='submit'/>\r\n                        <Button caption=\"Close\" btnSelector=\"btnDisabled\" clicked={props.modalClosed}/>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n)\r\n\r\nexport default twap;\r\n","import React, { Component } from 'react';\r\nimport Button from '../../../ui/button/button';\r\nimport Input from '../../../ui/input/input';\r\nimport Select from '../../../ui/select/select';\r\nimport classes from '../Manual/manual.module.css';\r\nimport inputClasses from '../../../ui/input/input.module.css';\r\nimport { Form, Field } from 'react-final-form';\r\nimport MaskedInput from 'react-text-mask';\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\r\n\r\nconst security = [\r\n    { value: 'Server unreachable', label: 'Server unreachable'}\r\n];\r\n\r\nconst internalCross = [\r\n    { value: 'Yes', label: 'Yes'},\r\n    { value: 'No', label: 'No'}\r\n];\r\n\r\nconst agression = [\r\n    { value: 'Low', label: 'Low'},\r\n    { value: 'Medium', label: 'Medium'},\r\n    { value: 'High', label: 'High'},\r\n    { value: 'Highest', label: 'Highest'}\r\n\r\n]\r\n\r\nconst onSubmit = (value) => {\r\n    console.log(value)\r\n}\r\n\r\nconst numberMask = createNumberMask({\r\n    prefix: '',\r\n    suffix: ''\r\n})\r\n\r\nconst priceMask = createNumberMask({\r\n    prefix: '$',\r\n    suffix: '',\r\n    allowDecimal: true,\r\n    decimalLimit: 5\r\n})\r\n\r\nconst required = value => (value ? undefined : 'Required')\r\n\r\nfunction selectComponentWrapper( props ) {\r\n    const {\r\n        input : { name, options, onChange, ...restInput},\r\n        meta,\r\n        ...rest\r\n    } = props;\r\n\r\n    return (<Select {...rest}\r\n                    className={classes.Select}\r\n                    options={props.options}\r\n                    name={props.name}\r\n                    changed={onChange}\r\n                    inputValue={props.inputValue}\r\n                    width={props.width}\r\n                    invalid={meta.error && meta.touched}\r\n                    containerWidth={props.containerWidth} />)\r\n}\r\n\r\nconst twapPy = ( props ) => (\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                render={({ handleSubmit, form, submitting, pristine, values}) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className={classes.SelectPart} >\r\n                        <div className={classes.Row}>\r\n                        <Field name=\"security\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='security 1'\r\n                                    width='100%'\r\n                                    containerWidth=\"30%\"\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"account\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='account'\r\n                                    width='100%'\r\n                                    containerWidth='30%'\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"side\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='side'\r\n                                    width='100%'\r\n                                    containerWidth=\"20%\"\r\n                                    >\r\n                            </Field>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Quantity:</p>\r\n                                <Field name=\"quantity\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                placeholder='Quantity'\r\n                                                name='quantity'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Price:</p>\r\n                                <Field name=\"Price\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={priceMask}\r\n                                                placeholder='Price'\r\n                                                name='price'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>ValidSeconds:</p>\r\n                                <Field name=\"validSeconds\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                name='validSeconds'\r\n                                                placeholder='300'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>MinSize:</p>\r\n                                <Field name=\"minSize\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                name='minSize'\r\n                                                placeholder='0'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>MaxPov:</p>\r\n                                <Field name=\"MaxPov\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                name='MaxPov'\r\n                                                placeholder='0'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Agression:</p>\r\n                                <Field name=\"agression\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={agression}\r\n                                    inputValue='side'\r\n                                    width='340%'\r\n                                    containerWidth=\"25%\"\r\n                                    >\r\n                                </Field>\r\n                        </div>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>InternalCross:</p>\r\n                                <Field name=\"internalCross\"\r\n                                        component={selectComponentWrapper}\r\n                                        options={internalCross}\r\n                                        inputValue='side'\r\n                                        width='340%'\r\n                                        containerWidth=\"25%\"\r\n                                        >\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonPart}>\r\n                        <Button caption=\"Send\" type='submit'/>\r\n                        <Button caption=\"Close\" btnSelector=\"btnDisabled\" clicked={props.modalClosed}/>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n)\r\n\r\nexport default twapPy;\r\n","import React from 'react';\r\nimport Button from '../../../ui/button/button';\r\nimport Input from '../../../ui/input/input';\r\nimport Select from '../../../ui/select/select';\r\nimport classes from '../Manual/manual.module.css';\r\nimport inputClasses from '../../../ui/input/input.module.css';\r\nimport { Form, Field } from 'react-final-form';\r\nimport MaskedInput from 'react-text-mask';\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\r\n\r\nconst security = [\r\n    { value: 'Server unreachable', label: 'Server unreachable'}\r\n];\r\n\r\nconst onSubmit = (value) => {\r\n    console.log(value)\r\n}\r\n\r\nconst numberMask = createNumberMask({\r\n    prefix: '',\r\n    suffix: ''\r\n})\r\n\r\nconst priceMask = createNumberMask({\r\n    prefix: '',\r\n    suffix: '',\r\n    allowDecimal: true,\r\n    decimalLimit: 5\r\n})\r\n\r\nconst required = value => (value ? undefined : 'Required')\r\n\r\nfunction selectComponentWrapper( props ) {\r\n    const {\r\n        input : { name, options, onChange, ...restInput},\r\n        meta,\r\n        ...rest\r\n    } = props;\r\n\r\n    return (<Select {...rest}\r\n                    className={classes.Select}\r\n                    options={props.options}\r\n                    name={props.name}\r\n                    changed={onChange}\r\n                    inputValue={props.inputValue}\r\n                    width={props.width}\r\n                    invalid={meta.error && meta.touched}\r\n                    containerWidth={props.containerWidth} />)\r\n}\r\n\r\nconst macrossing = ( props ) => (\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                render={({ handleSubmit, form, submitting, pristine, values}) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className={classes.SelectPart} >\r\n                        <div className={classes.Row}>\r\n                        <Field name=\"security\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='security 1'\r\n                                    width='100%'\r\n                                    containerWidth=\"30%\"\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"account\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='account'\r\n                                    width='100%'\r\n                                    containerWidth='30%'\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"side\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='side'\r\n                                    width='100%'\r\n                                    containerWidth=\"20%\"\r\n                                    >\r\n                            </Field>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Quantity 1:</p>\r\n                                <Field name=\"quantity1\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                placeholder='Quantity'\r\n                                                name='quantity1'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>SYMBOL LEG 2:</p>\r\n                                <Field name=\"symbolLeg2\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={false}\r\n                                                placeholder='Symbol leg 2'\r\n                                                name='symbolLeg2'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>ACCOUNT 2:</p>\r\n                                <Field name=\"accountInput2\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={false}\r\n                                                placeholder='Account 2'\r\n                                                name='accountInput2'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                        <Field name=\"security2\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='security 2'\r\n                                    width='100%'\r\n                                    containerWidth=\"30%\"\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"account2\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='account'\r\n                                    width='100%'\r\n                                    containerWidth='30%'\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"side2\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='side'\r\n                                    width='100%'\r\n                                    containerWidth=\"20%\"\r\n                                    >\r\n                            </Field>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Quantity 2:</p>\r\n                                <Field name=\"quantity2\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                placeholder='Quantity 2'\r\n                                                name='quantity2'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>SYMBOL LEG 3:</p>\r\n                                <Field name=\"symbolLeg3\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={false}\r\n                                                placeholder='Symbol leg 3'\r\n                                                name='symbolLeg3'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>ACCOUNT 3:</p>\r\n                                <Field name=\"accountInput3\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                placeholder='Account 3'\r\n                                                mask={false}\r\n                                                name='accountInput3'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                        <Field name=\"security3\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='security 3'\r\n                                    width='100%'\r\n                                    containerWidth=\"30%\"\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"account3\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='account'\r\n                                    width='100%'\r\n                                    containerWidth='30%'\r\n                                    >\r\n                            </Field>\r\n                            <Field name=\"side3\"\r\n                                    component={selectComponentWrapper}\r\n                                    validate={required}\r\n                                    options={security}\r\n                                    inputValue='side'\r\n                                    width='100%'\r\n                                    containerWidth=\"20%\"\r\n                                    >\r\n                            </Field>\r\n                        </div>\r\n                        <div className={classes.Row}>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>Quantity 3:</p>\r\n                                <Field name=\"quantity3\" validate={required}>\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={numberMask}\r\n                                                placeholder='Quantity 3'\r\n                                                name='quantity3'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>FastMA:</p>\r\n                                <Field name=\"FastMA\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={priceMask}\r\n                                                placeholder='FastMA'\r\n                                                name='price'\r\n                                                defaultValue='6'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                            <div className={classes.WrapTitle}>\r\n                                <p className={classes.Title}>SlowMA:</p>\r\n                                <Field name=\"SlowMA\">\r\n                                    {({ input, meta}) => (\r\n                                        <>\r\n                                        <MaskedInput {...input}\r\n                                                mask={priceMask}\r\n                                                placeholder='SlwoMA'\r\n                                                name='price'\r\n                                                defaultValue='24'\r\n                                                className={inputClasses.Input}\r\n                                                style={meta.error && meta.touched ? {border: '2px solid red'}  : null }\r\n                                                />\r\n                                        </>\r\n                                    )}\r\n                                </Field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonPart}>\r\n                        <Button caption=\"Send\" type='submit'/>\r\n                        <Button caption=\"Close\" btnSelector=\"btnDisabled\" clicked={props.modalClosed}/>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n)\r\n\r\nexport default macrossing;\r\n","import React, { Component } from 'react';\r\nimport Select from '../ui/select/select';\r\nimport classes from './placeOrder.module.css';\r\nimport GridLayout from 'react-grid-layout';\r\nimport Button from '../ui/button/button';\r\nimport Input from '../ui/input/input';\r\nimport Backdrop from '../ui/backdrop/backdrop';\r\nimport '../changePassword/changePassword.css';\r\nimport './Dragging.css';\r\nimport crossImage from '../../images/cross.svg';\r\nimport Manual from './Forms/Manual/manual';\r\nimport AlphaExample from './Forms/AplhaExample/alphaExample';\r\nimport Twap from './Forms/TWAP/twap';\r\nimport TwapPy from './Forms/TwapPy/twapPy';\r\nimport MACrossing from './Forms//MACrossing/macrossing';\r\n\r\nclass PlaceOrder extends Component {\r\n    state = {\r\n        styles : {border: ''},\r\n        errorMessage : '',\r\n        option: 'Manual'\r\n    }\r\n\r\n    options = [\r\n        { value: 'Manual', label: 'MANUAL' },\r\n        { value: 'MACrossing', label: 'MACrossing' },\r\n        { value: 'TWAP', label: 'TWAP' },\r\n        { value: 'AlphaExample', label: 'AlphaExample' },\r\n        { value: 'TwapPy', label: 'TwapPy' }\r\n    ];\r\n\r\n    layout = [\r\n        {i: 'a', x: 4, y: 0, w: 6 , h: 3, minW: 3.3, maxW: Infinity, minH: 2.9, maxH: Infinity}\r\n    ];\r\n\r\n    onSelectedChange = (data) => {\r\n        this.setState({option: data.value})\r\n    }\r\n\r\n    render() {\r\n        let optionRender = this.state.option;\r\n        if ( optionRender === 'Manual') {\r\n            optionRender = (\r\n                <Manual modalClosed={this.props.modalClosed}/>\r\n            )\r\n        }  else if ( optionRender === 'AlphaExample') {\r\n            optionRender = (\r\n                <AlphaExample modalClosed={this.props.modalClosed}/>\r\n            )\r\n        }  else if ( optionRender === 'TWAP') {\r\n            optionRender = (\r\n                <Twap modalClosed={this.props.modalClosed}/>\r\n            )\r\n        }  else if ( optionRender === 'TwapPy') {\r\n            optionRender = (\r\n                <TwapPy modalClosed={this.props.modalClosed}/>\r\n            )\r\n        } else if ( optionRender === 'MACrossing') {\r\n            optionRender = (\r\n                <MACrossing modalClosed={this.props.modalClosed}/>\r\n            )\r\n        }\r\n        return (\r\n            <>\r\n            <Backdrop show={this.props.show} />\r\n            <GridLayout className={classes.placeOrder}\r\n                        draggableHandle='.Handler'\r\n                        layout={this.layout}\r\n                        width={1200}\r\n                        verticalCompact={false}\r\n                        style={{\r\n                            transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                            opacity: this.props.show ? '1' : '0'\r\n                        }}\r\n                        isResizable={true}>\r\n                <div key=\"a\" className={classes.Draggable}>\r\n                    <div className='Handler'>\r\n                        <div className={classes.Header}>\r\n                            <div className={classes.HeaderGroup}>\r\n                                <p>Algo: </p>\r\n                                    <Select options={this.options}\r\n                                            value={this.options}\r\n                                            changed={(data) => this.onSelectedChange(data)}\r\n                                            width='145%'\r\n                                            containerWidth='30%'/>\r\n                            </div>\r\n                            <img src={crossImage} alt='' onClick={this.props.modalClosed}/>\r\n                        </div>\r\n                    </div>\r\n                    {optionRender}\r\n                </div>\r\n            </GridLayout>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlaceOrder;","import React, { Component } from 'react';\r\nimport GridLayout from 'react-grid-layout';\r\nimport Backdrop from '../../ui/backdrop/backdrop';\r\nimport classes from './algoEditor.module.css';\r\nimport '../../changePassword/changePassword.css';\r\nimport crossImage from '../../../images/cross.svg';\r\nimport {Treebeard} from 'react-treebeard';\r\nimport SplitPane, { Pane } from 'react-split-pane';\r\nimport './splitPane.css';\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-python\";\r\nimport \"ace-builds/src-noconflict/theme-twilight\";\r\n\r\n\r\n\r\nclass AlgoEditor extends Component {\r\n\r\n    layout = [\r\n        {i: 'a', x: 10, y: 0.5, w: 11, h: 4, minW: 10, maxW: Infinity, minH: 3.8, maxH: Infinity}\r\n    ];\r\n\r\n    dataPython = {\r\n        name: 'python',\r\n        \"toggled\": false,\r\n        \"activate\": true,\r\n        children: [\r\n            {\r\n                name: 'loading',\r\n                loading: true,\r\n                children: []\r\n            }\r\n        ],\r\n\r\n    }\r\n\r\n    dataOther = {\r\n        name: 'Other',\r\n        \"toggled\": false,\r\n        children: [\r\n            {\r\n                name: 'loading',\r\n                loading: true,\r\n                children: []\r\n            }\r\n        ]\r\n    }\r\n\r\n    onToggle = () => {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Backdrop show={this.props.show}/>\r\n                <GridLayout\r\n                    className={classes.AlgoEditor}\r\n                    layout={this.layout}\r\n                    width={1200}\r\n                    draggableHandle='.Handler'\r\n                    verticalCompact={false}\r\n                    isResizable={true}\r\n                    style={{\r\n                        transform: this.props.show ? 'translateY(0)' : 'translateY(-150vh)',\r\n                        opacity: this.props.show ? '1' : '0'\r\n                    }}>\r\n                        <div key='a' className={classes.Wrapper}>\r\n                            <div className='Handler'>\r\n                                <div className={classes.Draggable}>\r\n                                    <div>\r\n                                        <h3>Algo Editor</h3>\r\n                                        <img src={crossImage} alt=''/>\r\n                                    </div>\r\n                                    <img src={crossImage} alt='' onClick={this.props.modalClosed}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.ContentWrapper}>\r\n                                <SplitPane\r\n                                    split='horizontal'\r\n                                    >\r\n                                    <SplitPane\r\n                                        split='vertical'\r\n                                        >\r\n                                        <div initialSize='200px' className={classes.Tree}>\r\n                                            <Treebeard\r\n                                                data={this.dataPython}\r\n                                                onToggle={this.onToggle}\r\n                                            />\r\n                                            <Treebeard\r\n                                                data={this.dataOther}\r\n                                            />\r\n                                        </div>\r\n                                        <div className={classes.Editor}>\r\n                                            <AceEditor\r\n                                                 placeholder=\"Placeholder Text\"\r\n                                                 mode=\"python\"\r\n                                                 theme=\"twilight\"\r\n                                                 name=\"blah2\"\r\n                                                 onLoad={this.onLoad}\r\n                                                 onChange={this.onChange}\r\n                                                 fontSize={14}\r\n                                                 showPrintMargin={true}\r\n                                                 showGutter={true}\r\n                                                 highlightActiveLine={true}\r\n                                                 value={`from`}\r\n                                                 setOptions={{\r\n                                                 enableBasicAutocompletion: true,\r\n                                                 enableLiveAutocompletion: true,\r\n                                                 enableSnippets: false,\r\n                                                 showLineNumbers: true,\r\n                                                 tabSize: 2,\r\n                                                 }}\r\n                                                width='100%'\r\n                                                />\r\n                                        </div>\r\n                                    </SplitPane>\r\n                                    <div initialSize='170px'>\r\n                                        debug\r\n                                    </div>\r\n                                </SplitPane>\r\n                            </div>\r\n\r\n                        </div>\r\n                </GridLayout>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AlgoEditor;","import React, { Component } from 'react';\r\nimport ChangePassword from '../../components/changePassword/changePassword';\r\nimport PlaceOrder from '../../components/placeOrder/placeOrder';\r\nimport AlgoEditor from '../../components/editors/algoEditor/algoEditor';\r\nimport Button from '../../components/ui/button/button';\r\n\r\n\r\nclass Dashboard extends Component {\r\n    state = {\r\n        showPlaceOrder: false,\r\n        showChangePassword: false,\r\n        showAlgo: true\r\n    }\r\n\r\n    placeOrderHandler = () => {\r\n        this.setState({showPlaceOrder: true})\r\n    }\r\n\r\n    changePasswordHandler = () => {\r\n        this.setState({showChangePassword: true})\r\n    }\r\n\r\n    algoHandler = () => {\r\n        this.setState({showAlgo: true})\r\n    }\r\n\r\n    modalClosedHandler = () => {\r\n        this.setState({showPlaceOrder: false, showChangePassword: false, showAlgo: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <p>dashboard</p>\r\n                <Button caption='Place order' clicked={this.placeOrderHandler}/>  <br/>\r\n                <Button caption='Change password' clicked={this.changePasswordHandler}/> <br/>\r\n                <Button caption='Algo' clicked={this.algoHandler} />\r\n                <PlaceOrder show={this.state.showPlaceOrder} modalClosed={this.modalClosedHandler}/>\r\n                <ChangePassword show={this.state.showChangePassword} modalClosed={this.modalClosedHandler}/>\r\n                <AlgoEditor show={this.state.showAlgo} modalClosed={this.modalClosedHandler}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport classes from './input.module.css';\r\n\r\n\r\nconst input = ( props ) => {\r\n    return (\r\n        <div className={classes.InputBox}>\r\n            <img src={props.img} alt=''/>\r\n            <input onChange={props.changed} value={props.value} className={classes.Input} placeholder={props.placeholder} type={props.type} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","import React, { Component } from 'react';\r\nimport Input from '../../components/ui/loginInput/input';\r\nimport Button from '../../components/ui/button/button';\r\nimport classes from './login.module.css';\r\nimport manImage from '../../images/man.svg';\r\nimport lockImage from '../../images/lock.svg';\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        valid: false,\r\n        errormessage: 'Server unreachable'\r\n    }\r\n\r\n    userInputHandler = (event) => {\r\n        this.setState({username : event.target.value});\r\n        this.buttonClicked();\r\n    }\r\n\r\n    passwordInputHandler = (event) => {\r\n        this.setState({password : event.target.value});\r\n        this.buttonClicked();\r\n    }\r\n\r\n    buttonClicked = () => {\r\n        setTimeout(() => {\r\n            if(this.state.username === 'test' && this.state.password === 'test')\r\n                this.setState({valid: true});\r\n            else {\r\n                this.setState({valid: false});\r\n            }\r\n            }, 0);\r\n    }\r\n\r\n    errorHandler = () => {\r\n        setTimeout(() => {\r\n                this.setState({errormessage: 'Unknown username or password'})\r\n            }, 0);\r\n    }\r\n\r\n    render() {\r\n        let button = this.state.username === '' || this.state.password === '' ? true : false;\r\n        let pass = this.state.valid ? (<Button clicked={this.props.clicked} caption=\"Login\" disabled={button}/>)\r\n                                    : (<Button clicked={this.errorHandler} caption=\"Login\" disabled={button}/>)\r\n        return (\r\n            <div data-theme={this.props.dataTheme} className={classes.Login} >\r\n                <h1>Login</h1>\r\n                <p>Sing in to your account</p>\r\n                <p>Username/password: <span className={classes.YellowText}>test/test</span></p>\r\n                <Input changed={this.userInputHandler} img={manImage} placeholder='Username' type='text' value={this.state.value}/>\r\n                <Input changed={this.passwordInputHandler} img={lockImage} value={this.state.value} placeholder='Password' type='password'/>\r\n                {pass}\r\n                <p>{this.state.errormessage}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\n\r\nclass Risk extends Component {\r\n    render() {\r\n        return (\r\n            <p>risk</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Risk;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Layout from './components/layout/layout';\nimport Dashboard from './containers/dashboard/dashboard';\nimport Login from './containers/login/login';\nimport Risk from './containers/risk/risk';\n\nclass App extends Component {\n  state = {\n    isLogged: false\n  }\n\n  componentDidMount() {\n    const isLogged = JSON.parse(localStorage.getItem('isLogged'));\n    console.log(isLogged)\n    this.setState({isLogged : isLogged});\n  }\n\n  onLoginPass = () => {\n    let promise = new Promise(( resolve ) => {\n      resolve(this.setState({isLogged: true}));\n    });\n    promise.then (\n      result => localStorage.setItem('isLogged', this.state.isLogged)\n    )\n  }\n\n  onLogout = () => {\n    let promise = new Promise(( resolve ) => {\n      resolve(this.setState({isLogged: false}));\n    });\n    promise.then (\n      result => localStorage.setItem('isLogged', this.state.isLogged)\n    )\n  }\n\n  render () {\n    let login = (<Login clicked={this.onLoginPass}/>);\n    let redirect = this.state.isLogged ?\n        (\n          <>\n            <Route path='/dashboard' component={Dashboard}/>\n            <Route path='/login'><Redirect to='/dashboard'/></Route>\n            <Route path='/risk' component={Risk}/>\n            <Route path='/' exact>\n              <Redirect to='/dashboard'/>\n            </Route>\n            <button onClick={this.onLogout}>Log Out</button>\n          </>\n        )\n      : (\n          <>\n            <Route path='/login'>{login}</Route>\n            <Route path='/dashboard'>\n              <Redirect to='/login'/>\n            </Route>\n            <Route path='/risk'>\n              <Redirect to='/login'/>\n            </Route>\n            <Route path='/' exact>\n              <Redirect to='/login'/>\n            </Route>\n          </>\n        )\n      ;\n    return (\n      <Layout>\n        <BrowserRouter>\n          <Switch>\n            {redirect}\n          </Switch>\n        </BrowserRouter>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlaceOrder\":\"placeOrder_PlaceOrder__3M5Uy\",\"Draggable\":\"placeOrder_Draggable__3oNuX\",\"Header\":\"placeOrder_Header__2sOe0\",\"SelectPart\":\"placeOrder_SelectPart__3LItk\",\"Error\":\"placeOrder_Error__1ii4_\",\"Input\":\"placeOrder_Input__2gafB\",\"ButtonPart\":\"placeOrder_ButtonPart__2ftAN\",\"HeaderGroup\":\"placeOrder_HeaderGroup__25_or\",\"Row\":\"placeOrder_Row__3O4Db\",\"WrapTitle\":\"placeOrder_WrapTitle__ZivIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"login_Login__3w3_t\",\"YellowText\":\"login_YellowText__3i5z7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"button_Button__ZQLJg\",\"ButtonDisabled\":\"button_ButtonDisabled__1FgY3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__2z1qa\",\"InputBox\":\"input_InputBox__JoeFr\"};"],"sourceRoot":""}