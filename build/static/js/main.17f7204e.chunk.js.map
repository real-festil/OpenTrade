{"version":3,"sources":["components/layout/layout.js","containers/dashboard/dashboard.js","containers/login/login.js","containers/risk/risk.js","hoc/ReactAux.js","App.js","serviceWorker.js","index.js"],"names":["Layout","this","props","children","Component","Dashboard","login","onClick","clicked","Risk","ReactAux","App","state","isLogged","onLoginPass","setState","console","log","redirect","path","component","to","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAeeA,E,iLAVP,OACI,6BACI,kBAAC,IAAD,MACA,qCACCC,KAAKC,MAAMC,c,GANPC,aCONC,E,iLANP,OACI,4C,GAHYD,aCMTE,EAND,SAAEJ,GACZ,OACI,4BAAQK,QAASL,EAAMM,SAAvB,UCMOC,E,iLANP,OACI,uC,GAHOL,aCAJM,EAFE,SAAER,GAAF,OAAaA,EAAMC,UC2DrBQ,E,2MAlDbC,MAAQ,CACNC,UAAU,G,EAGZC,YAAc,WACZ,EAAKC,SAAS,CAACF,UAAU,IACzBG,QAAQC,IAAI,EAAKL,Q,wEAIjB,IAAIN,EAAS,kBAAC,EAAD,CAAOE,QAASP,KAAKa,cAC9BI,EAAWjB,KAAKW,MAAMC,SAEpB,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWf,IACpC,kBAAC,IAAD,CAAOc,KAAK,UAAS,kBAAC,IAAD,CAAUE,GAAG,gBAClC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWX,IAC/B,kBAAC,IAAD,CAAOU,KAAK,IAAIG,OAAK,GACnB,kBAAC,IAAD,CAAUD,GAAG,iBAKjB,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOF,KAAK,UAAUb,GACtB,kBAAC,IAAD,CAAOa,KAAK,cACV,kBAAC,IAAD,CAAUE,GAAG,YAEf,kBAAC,IAAD,CAAOF,KAAK,SACV,kBAAC,IAAD,CAAUE,GAAG,YAEf,kBAAC,IAAD,CAAOF,KAAK,IAAIG,OAAK,GACnB,kBAAC,IAAD,CAAUD,GAAG,aAKvB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGH,S,GA1CKd,aCIEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.17f7204e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ThemeSwitcher from 'react-theme-switcher';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ThemeSwitcher/>\r\n                <p>Layout</p>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React, { Component } from 'react';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <p>dashboard</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst login = ( props ) => {\r\n    return (\r\n        <button onClick={props.clicked}>login</button>\r\n    );\r\n}\r\n\r\nexport default login;","import React, { Component } from 'react';\r\n\r\nclass Risk extends Component {\r\n    render() {\r\n        return (\r\n            <p>risk</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Risk;","const ReactAux = ( props ) => props.children;\r\n\r\nexport default ReactAux;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Layout from './components/layout/layout';\nimport Dashboard from './containers/dashboard/dashboard';\nimport Login from './containers/login/login';\nimport Risk from './containers/risk/risk';\nimport ReactAux from './hoc/ReactAux';\n\nclass App extends Component {\n  state = {\n    isLogged: false\n  }\n\n  onLoginPass = () => {\n    this.setState({isLogged: true});\n    console.log(this.state);\n  }\n\n  render () {\n    let login = (<Login clicked={this.onLoginPass}/>);\n    let redirect = this.state.isLogged ?\n        (\n          <ReactAux>\n            <Route path='/dashboard' component={Dashboard}/>\n            <Route path='/login'><Redirect to='/dashboard'/></Route>\n            <Route path='/risk' component={Risk}/>\n            <Route path='/' exact>\n              <Redirect to='/dashboard'/>\n            </Route>\n          </ReactAux>\n        )\n      : (\n          <ReactAux>\n            <Route path='/login'>{login}</Route>\n            <Route path='/dashboard'>\n              <Redirect to='/login'/>\n            </Route>\n            <Route path='/risk'>\n              <Redirect to='/login'/>\n            </Route>\n            <Route path='/' exact>\n              <Redirect to='/login'/>\n            </Route>\n          </ReactAux>\n        )\n      ;\n    return (\n      <Layout>\n        <BrowserRouter>\n          <Switch>\n            {redirect}\n          </Switch>\n        </BrowserRouter>\n      </Layout>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}